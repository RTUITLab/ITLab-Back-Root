trigger:
- master
- develop

resources:
- repo: self

variables:
  ${{ if notIn(variables['Build.SourceBranchName'], 'master', 'develop') }}:
    buildImage: false
    deployService: false
    deployEnvironment: 'no'
    imageTags: 'no'
    serviceName: 'no'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    buildImage: true
    deployService: true
    deployEnvironment: development
    imageTags: |
      $(Build.BuildId)
      develop
    serviceName: itlab-develop_proxy-back
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildImage: true
    deployService: true
    deployEnvironment: production
    imageTags: |
      $(Build.BuildId)
      latest
    serviceName: itlab_proxy-back

stages:
- stage: PushDockerImage
  condition: and(succeeded(), ${{variables.buildImage}})
  displayName: Push Docker Image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'rtuitlab connection by admin'
        repository: 'rtuitlab/itlab-proxy-back'
        command: 'buildAndPush'
        Dockerfile: 'Proxy-Back/Dockerfile'
        buildContext: 'Proxy-Back'
        tags: ${{variables.imageTags}}
- stage: UpdateService
  condition: and(succeeded(), ${{variables.deployService}})
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: ${{variables.deployEnvironment}}
    strategy:
      runOnce:
        deploy:
          steps:
            - download: none
            - task: SSH@0
              inputs:
                sshEndpoint: 'swarm manager'
                runOptions: 'commands'
                commands: 'docker service update --image rtuitlab/itlab-proxy-back:$(Build.BuildId) ${{variables.serviceName}} --with-registry-auth'
                readyTimeout: '20000'